<?xml version="1.0"?>
<doc>
    <assembly>
        <name>mimc-csharp-sdk</name>
    </assembly>
    <members>
        <member name="M:com.xiaomi.mimc.handler.IMIMCMessageHandler.HandleMessage(System.Collections.Generic.List{com.xiaomi.mimc.packet.P2PMessage})">
            <summary>
            发送单聊消息回调接口
            </summary>
            <param name="packets"> 
            param[packets]: 单聊消息集
            @note: P2PMessage 单聊消息
            P2PMessage.packetId: 消息ID
            P2PMessage.sequence: 序列号
            P2PMessage.fromAccount: 发送方帐号
            P2PMessage.fromResource: 发送方终端id
            P2PMessage.payload: 消息体
            P2PMessage.timestamp: 时间戳</param>
        </member>
        <member name="M:com.xiaomi.mimc.handler.IMIMCMessageHandler.HandleServerACK(com.xiaomi.mimc.packet.ServerAck)">
            <summary>
            服务器返回ACK回调接口
            </summary>
            <param name="serverAck">
            @param[serverAck]: 服务器返回的serverAck对象
            serverAck.packetId: 客户端生成的消息ID
            serverAck.timestamp: 消息发送到服务器的时间(单位:ms)
            serverAck.sequence: 服务器为消息分配的递增ID，单用户空间内递增唯一，可用于去重/排序</param>
        </member>
        <member name="M:com.xiaomi.mimc.handler.IMIMCMessageHandler.HandleSendMessageTimeout(com.xiaomi.mimc.packet.P2PMessage)">
            <summary>
            单聊消息超时回调接口
            </summary>
            <param name="message">param[message]: 发送超时的单聊消息</param>
        </member>
        <member name="M:com.xiaomi.mimc.handler.IMIMCOnlineStatusHandler.StatusChange(System.Boolean,System.String,System.String,System.String)">
            <summary>
            用户在线状态回调接口
            </summary>
            <param name="isOnline">登录状态，Constant.OnlineStatus.Online 在线，Constant.OnlineStatus.Offline 离线。</param>
            <param name="errType">状态码</param>
            <param name="errReason">状态原因</param>
            <param name="errDescription">状态描述</param>
        </member>
        <member name="M:com.xiaomi.mimc.handler.IMIMCTokenFetcher.FetchToken">
             <summary>
              FetchToken()访问APP应用方自行实现的AppProxyService服务，
              该服务实现以下功能：
            1. 存储appId/appKey/appSecret(appKey/appSecret不可存储在APP客户端，以防泄漏)
            2. 用户在APP系统内的合法鉴权
            3. 调用小米TokenService服务，并将小米TokenService服务返回结果通过fetchToken()原样返回
             </summary>
             <returns>小米TokenService服务下发的原始数据</returns>
        </member>
        <!-- 对于成员“M:com.xiaomi.mimc.utils.MIMCUtil.GetLineNum”忽略有格式错误的 XML 注释 -->
        <member name="M:com.xiaomi.mimc.utils.MIMCUtil.GetCurSourceFileName">
            <summary>
            取当前源码的源文件名
            </summary>
            <returns></returns>
        </member>
        <!-- 对于成员“M:com.xiaomi.mimc.utils.MIMCUtil.GetRandomString(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String)”忽略有格式错误的 XML 注释 -->
        <member name="M:com.xiaomi.mimc.utils.MIMCUtil.SerializeToFile``1(``0,System.String)">
            <summary>
            将对象序列化后保存到文件中
            </summary>
        </member>
        <member name="M:com.xiaomi.mimc.utils.MIMCUtil.Deserialize``1(System.String)">
            <summary>
            从文件中读取数据并反序列化成对象
            </summary>
        </member>
        <member name="T:com.xiaomi.mimc.utils.HttpWebResponseUtil">
            <summary>  
            有关HTTP请求的辅助类  
            </summary>  
        </member>
        <member name="M:com.xiaomi.mimc.utils.HttpWebResponseUtil.CreateGetHttpResponse(System.String,System.Nullable{System.Int32},System.String,System.Net.CookieCollection)">
            <summary>  
            创建GET方式的HTTP请求  
            </summary>  
            <param name="url">请求的URL</param>  
            <param name="timeout">请求的超时时间</param>  
            <param name="userAgent">请求的客户端浏览器信息，可以为空</param>  
            <param name="cookies">随同HTTP请求发送的Cookie信息，如果不需要身份验证可以为空</param>  
            <returns></returns>  
        </member>
        <member name="M:com.xiaomi.mimc.utils.HttpWebResponseUtil.CreatePostHttpResponse(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{System.Int32},System.String,System.Text.Encoding,System.Net.CookieCollection)">
            <summary>  
            创建POST方式的HTTP请求  
            </summary>  
            <param name="url">请求的URL</param>  
            <param name="parameters">随同请求POST的参数名称及参数值字典</param>  
            <param name="timeout">请求的超时时间</param>  
            <param name="userAgent">请求的客户端浏览器信息，可以为空</param>  
            <param name="requestEncoding">发送HTTP请求时所用的编码</param>  
            <param name="cookies">随同HTTP请求发送的Cookie信息，如果不需要身份验证可以为空</param>  
            <returns></returns>  
        </member>
        <member name="M:com.xiaomi.mimc.utils.HttpWebResponseUtil.CreatePostHttpResponse(System.String,System.String,System.Nullable{System.Int32},System.String,System.Text.Encoding,System.Net.CookieCollection)">
            <summary>  
            创建POST方式的HTTP请求  
            </summary>  
            <param name="url">请求的URL</param>  
            <param name="parameters">随同请求POST的参数名称及参数值字典</param>  
            <param name="timeout">请求的超时时间</param>  
            <param name="userAgent">请求的客户端浏览器信息，可以为空</param>  
            <param name="requestEncoding">发送HTTP请求时所用的编码</param>  
            <param name="cookies">随同HTTP请求发送的Cookie信息，如果不需要身份验证可以为空</param>  
            <returns></returns>  
        </member>
        <member name="M:com.xiaomi.mimc.utils.ByteBuffer.#ctor(System.Int32)">
            构造方法
        </member>
        <member name="M:com.xiaomi.mimc.utils.ByteBuffer.#ctor(System.Byte[])">
            构造方法
        </member>
        <member name="M:com.xiaomi.mimc.utils.ByteBuffer.Allocate(System.Int32)">
            构建一个capacity长度的字节缓存区ByteBuffer对象
        </member>
        <member name="M:com.xiaomi.mimc.utils.ByteBuffer.Allocate(System.Byte[])">
            构建一个以bytes为字节缓存区的ByteBuffer对象，一般不推荐使用
        </member>
        <member name="M:com.xiaomi.mimc.utils.ByteBuffer.FixLength(System.Int32)">
            根据length长度，确定大于此leng的最近的2次方数，如length=7，则返回值为8
        </member>
        <member name="M:com.xiaomi.mimc.utils.ByteBuffer.flip(System.Byte[])">
            翻转字节数组，如果本地字节序列为低字节序列，则进行翻转以转换为高字节序列
        </member>
        <member name="M:com.xiaomi.mimc.utils.ByteBuffer.FixSizeAndReset(System.Int32,System.Int32)">
            确定内部字节缓存数组的大小
        </member>
        <member name="M:com.xiaomi.mimc.utils.ByteBuffer.putBytes(System.Byte[],System.Int32,System.Int32)">
            将bytes字节数组从startIndex开始的length字节写入到此缓存区
        </member>
        <member name="M:com.xiaomi.mimc.utils.ByteBuffer.putBytes(System.Byte[],System.Int32)">
            将字节数组中从0到length的元素写入缓存区
        </member>
        <member name="M:com.xiaomi.mimc.utils.ByteBuffer.putBytes(System.Byte[])">
            将字节数组全部写入缓存区
        </member>
        <member name="M:com.xiaomi.mimc.utils.ByteBuffer.put(com.xiaomi.mimc.utils.ByteBuffer)">
            将一个ByteBuffer的有效字节区写入此缓存区中
        </member>
        <member name="M:com.xiaomi.mimc.utils.ByteBuffer.putChar(System.Char)">
            写入一个char数据
        </member>
        <member name="M:com.xiaomi.mimc.utils.ByteBuffer.putShort(System.Int16)">
            写入一个int16数据
        </member>
        <member name="M:com.xiaomi.mimc.utils.ByteBuffer.putUshort(System.UInt16)">
            写入一个uint16数据
        </member>
        <member name="M:com.xiaomi.mimc.utils.ByteBuffer.putInt(System.Int32)">
            写入一个int32数据
        </member>
        <member name="M:com.xiaomi.mimc.utils.ByteBuffer.putUint(System.UInt32)">
            写入一个uint32数据
        </member>
        <member name="M:com.xiaomi.mimc.utils.ByteBuffer.putLong(System.Int64)">
            写入一个int64数据
        </member>
        <member name="M:com.xiaomi.mimc.utils.ByteBuffer.putUlong(System.UInt64)">
            写入一个uint64数据
        </member>
        <member name="M:com.xiaomi.mimc.utils.ByteBuffer.putFloat(System.Single)">
            写入一个float数据
        </member>
        <member name="M:com.xiaomi.mimc.utils.ByteBuffer.putByte(System.Byte)">
            写入一个byte数据
        </member>
        <member name="M:com.xiaomi.mimc.utils.ByteBuffer.putDouble(System.Double)">
            写入一个double类型数据
        </member>
        <member name="M:com.xiaomi.mimc.utils.ByteBuffer.ReadByte">
            读取一个字节
        </member>
        <member name="M:com.xiaomi.mimc.utils.ByteBuffer.Read(System.Int32)">
            从读取索引位置开始读取len长度的字节数组
        </member>
        <member name="M:com.xiaomi.mimc.utils.ByteBuffer.ReadChar">
            读取一个char数据
        </member>
        <member name="M:com.xiaomi.mimc.utils.ByteBuffer.ReadShort">
            读取一个int16数据
        </member>
        <member name="M:com.xiaomi.mimc.utils.ByteBuffer.ReadUint">
            读取一个uint32数据
        </member>
        <member name="M:com.xiaomi.mimc.utils.ByteBuffer.ReadInt">
            读取一个int32数据
        </member>
        <member name="M:com.xiaomi.mimc.utils.ByteBuffer.ReadUlong">
            读取一个uint64数据
        </member>
        <member name="M:com.xiaomi.mimc.utils.ByteBuffer.ReadLong">
            读取一个long数据
        </member>
        <member name="M:com.xiaomi.mimc.utils.ByteBuffer.ReadFloat">
            读取一个float数据
        </member>
        <member name="M:com.xiaomi.mimc.utils.ByteBuffer.ReadDouble">
            读取一个double数据
        </member>
        <member name="M:com.xiaomi.mimc.utils.ByteBuffer.ReadBytes(System.Byte[],System.Int32,System.Int32)">
            从读取索引位置开始读取len长度的字节到disbytes目标字节数组中
            @params disstart 目标字节数组的写入索引
        </member>
        <member name="M:com.xiaomi.mimc.utils.ByteBuffer.DiscardReadBytes">
            清除已读字节并重建缓存区
        </member>
        <member name="M:com.xiaomi.mimc.utils.ByteBuffer.Clear">
            清空此对象
        </member>
        <member name="M:com.xiaomi.mimc.utils.ByteBuffer.SetReaderIndex(System.Int32)">
            设置开始读取的索引
        </member>
        <member name="M:com.xiaomi.mimc.utils.ByteBuffer.MarkReaderIndex">
            标记读取的索引位置
        </member>
        <member name="M:com.xiaomi.mimc.utils.ByteBuffer.MarkputrIndex">
            标记写入的索引位置
        </member>
        <member name="M:com.xiaomi.mimc.utils.ByteBuffer.ResetReaderIndex">
            将读取的索引位置重置为标记的读取索引位置
        </member>
        <member name="M:com.xiaomi.mimc.utils.ByteBuffer.ResetputrIndex">
            将写入的索引位置重置为标记的写入索引位置
        </member>
        <member name="M:com.xiaomi.mimc.utils.ByteBuffer.ReadableBytes">
            可读的有效字节数
        </member>
        <member name="M:com.xiaomi.mimc.utils.ByteBuffer.ToArray">
            获取可读的字节数组
        </member>
        <member name="M:com.xiaomi.mimc.utils.ByteBuffer.GetCapacity">
            获取缓存区大小
        </member>
        <member name="T:com.xiaomi.mimc.utils.Adler32">
            <summary>
            Computes Adler32 checksum for a stream of data. An Adler32
            checksum is not as reliable as a CRC32 checksum, but a lot faster to
            compute.
            
            The specification for Adler32 may be found in RFC 1950.
            ZLIB Compressed Data Format Specification version 3.3)
            
            
            From that document:
            
                 "ADLER32 (Adler-32 checksum)
                  This contains a checksum value of the uncompressed data
                  (excluding any dictionary data) computed according to Adler-32
                  algorithm. This algorithm is a 32-bit extension and improvement
                  of the Fletcher algorithm, used in the ITU-T X.224 / ISO 8073
                  standard.
            
                  Adler-32 is composed of two sums accumulated per byte: s1 is
                  the sum of all bytes, s2 is the sum of all s1 values. Both sums
                  are done modulo 65521. s1 is initialized to 1, s2 to zero.  The
                  Adler-32 checksum is stored as s2*65536 + s1 in most-
                  significant-byte first (network) order."
            
             "8.2. The Adler-32 algorithm
            
               The Adler-32 algorithm is much faster than the CRC32 algorithm yet
               still provides an extremely low probability of undetected errors.
            
               The modulo on unsigned long accumulators can be delayed for 5552
               bytes, so the modulo operation time is negligible.  If the bytes
               are a, b, c, the second sum is 3a + 2b + c + 3, and so is position
               and order sensitive, unlike the first sum, which is just a
               checksum.  That 65521 is prime is important to avoid a possible
               large class of two-byte errors that leave the check unchanged.
               (The Fletcher checksum uses 255, which is not prime and which also
               makes the Fletcher check insensitive to single byte changes 0 -
               255.)
            
               The sum s1 is initialized to 1 instead of zero to make the length
               of the sequence part of s2, so that the length does not have to be
               checked separately. (Any sequence of zeroes has a Fletcher
               checksum of zero.)"
            </summary>
            <see cref="!:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream"/>
            <see cref="!:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream"/>
        </member>
        <member name="F:com.xiaomi.mimc.utils.Adler32.BASE">
            <summary>
            largest prime smaller than 65536
            </summary>
        </member>
        <member name="F:com.xiaomi.mimc.utils.Adler32.checkValue">
            <summary>
            The CRC data checksum so far.
            </summary>
        </member>
        <member name="M:com.xiaomi.mimc.utils.Adler32.#ctor">
            <summary>
            Initialise a default instance of <see cref="T:com.xiaomi.mimc.utils.Adler32"></see>
            </summary>	
        </member>
        <member name="M:com.xiaomi.mimc.utils.Adler32.Reset">
            <summary>
            Resets the Adler32 data checksum as if no update was ever called.
            </summary>
        </member>
        <member name="M:com.xiaomi.mimc.utils.Adler32.Value">
            <summary>
            Returns the Adler32 data checksum computed so far.
            </summary>
        </member>
        <member name="M:com.xiaomi.mimc.utils.Adler32.Update(System.Int32)">
            <summary>
            Updates the checksum with the byte b.
            </summary>
            <param name="bval">
            The data value to add. The high byte of the int is ignored.
            </param>
        </member>
        <member name="M:com.xiaomi.mimc.utils.Adler32.Update(System.Byte[])">
            <summary>
            Updates the Adler32 data checksum with the bytes taken from 
            a block of data.
            </summary>
            <param name="buffer">Contains the data to update the checksum with.</param>
        </member>
        <member name="M:com.xiaomi.mimc.utils.Adler32.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Update Adler32 data checksum based on a portion of a block of data
            </summary>
            <param name = "buffer">Contains the data to update the CRC with.</param>
            <param name = "offset">The offset into the buffer where the data starts</param>
            <param name = "count">The number of data bytes to update the CRC with.</param>
        </member>
        <member name="M:com.xiaomi.mimc.utils.Adler32.ComputeHash(System.Byte[],System.Int32,System.Int32)">
            <summary>Performs the hash algorithm on given data array.</summary>
            <param name="bytesArray">Input data.</param>
            <param name="byteStart">The position to begin reading from.</param>
            <param name="bytesToRead">How many bytes in the bytesArray to read.</param>
        </member>
        <member name="T:com.xiaomi.mimc.MIMCUser">
            <summary>
            MIMCUser
            </summary>
        </member>
        <member name="M:com.xiaomi.mimc.MIMCUser.#ctor(System.Int64,System.String)">
            <summary>
            SDK User 构造函数
            </summary>
            <param name="appId">开发者在小米开放平台申请的appId</param>
            <param name="appAccount">用户在APP帐号系统内的唯一帐号ID</param>
        </member>
        <member name="M:com.xiaomi.mimc.MIMCUser.ScanAndCallBack">
            <summary>
            用于超时检测通知和重连
            </summary>
        </member>
        <member name="M:com.xiaomi.mimc.MIMCUser.Login">
            <summary>
            用户登录
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:com.xiaomi.mimc.MIMCUser.Logout">
            <summary>
            用户登出
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:com.xiaomi.mimc.MIMCUser.SendMessage(System.String,System.Byte[])">
            <summary>
            发送单聊消息
            </summary>
            <param name="toAppAccount">消息接收者在APP帐号系统内的唯一帐号ID</param>
            <param name="msg">开发者自定义消息体，二级制数组格式</param>
            <returns>packetId客户端生成的消息ID</returns>
        </member>
        <member name="M:com.xiaomi.mimc.MIMCUser.RegisterOnlineStatusHandler(com.xiaomi.mimc.handler.IMIMCOnlineStatusHandler)">
            <summary>
            在线状态回调接口
            </summary>
            <param name="onlineStatusHandler">传入实现IMIMCOnlineStatusHandler的实现类</param>
        </member>
        <member name="M:com.xiaomi.mimc.MIMCUser.RegisterMIMCMessageHandler(com.xiaomi.mimc.handler.IMIMCMessageHandler)">
            <summary>
            消息回调接口
            </summary>
            <param name="messageHandler">传入实现IMIMCMessageHandler的实现类</param>
        </member>
        <member name="M:com.xiaomi.mimc.MIMCUser.RegisterMIMCTokenFetcher(com.xiaomi.mimc.handler.IMIMCTokenFetcher)">
            <summary>
            注册获取Token接口
            </summary>
            <param name="tokenFetcher">传入实现IMIMCTokenFetcher的实现类</param>
        </member>
    </members>
</doc>
